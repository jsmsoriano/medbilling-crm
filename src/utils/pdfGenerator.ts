
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { format } from 'date-fns';
import { ClientPerformanceData } from '@/hooks/useReportData';

declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

export interface ReportType {
  value: string;
  label: string;
}

export const generateReportPDF = async (
  reportType: string,
  reportTypes: ReportType[],
  filteredData: ClientPerformanceData[],
  selectedClient?: string,
  selectedPracticeGroup?: string
) => {
  const doc = new jsPDF();
  
  // Header
  doc.setFontSize(20);
  doc.setTextColor(44, 82, 130);
  doc.text('Medical Billing Report', 20, 25);
  
  // Report details
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  const reportTypeLabel = reportTypes.find(rt => rt.value === reportType)?.label || '';
  doc.text(`Report Type: ${reportTypeLabel}`, 20, 40);
  doc.text(`Generated: ${format(new Date(), 'PPP')}`, 20, 50);
  
  if (selectedClient) {
    doc.text(`Client: ${selectedClient}`, 20, 60);
  }
  
  if (selectedPracticeGroup) {
    doc.text(`Practice Group: ${selectedPracticeGroup}`, 20, 70);
  }

  // Summary metrics
  let yPosition = selectedClient || selectedPracticeGroup ? 85 : 75;
  
  doc.setFontSize(16);
  doc.setTextColor(44, 82, 130);
  doc.text('Executive Summary', 20, yPosition);
  
  yPosition += 15;
  doc.setFontSize(11);
  doc.setTextColor(0, 0, 0);
  
  const totalRevenue = filteredData.reduce((sum, client) => sum + client.revenue, 0);
  const totalClaims = filteredData.reduce((sum, client) => sum + client.claims, 0);
  const avgDenialRate = filteredData.length > 0 ? 
    (filteredData.reduce((sum, client) => sum + client.denialRate, 0) / filteredData.length).toFixed(1) : '0';
  const avgSatisfaction = filteredData.length > 0 ? 
    (filteredData.reduce((sum, client) => sum + client.satisfaction, 0) / filteredData.length).toFixed(1) : '0';

  doc.text(`Total Revenue: $${totalRevenue.toLocaleString()}`, 20, yPosition);
  doc.text(`Total Claims: ${totalClaims}`, 20, yPosition + 10);
  doc.text(`Average Denial Rate: ${avgDenialRate}%`, 20, yPosition + 20);
  doc.text(`Average Satisfaction: ${avgSatisfaction}%`, 20, yPosition + 30);

  // Data table
  yPosition += 50;
  
  if (reportType === 'client-performance') {
    doc.autoTable({
      startY: yPosition,
      head: [['Client', 'Revenue', 'Claims', 'Denial Rate', 'Satisfaction', 'Practice Group']],
      body: filteredData.map(client => [
        client.name,
        `$${client.revenue.toLocaleString()}`,
        client.claims.toString(),
        `${client.denialRate}%`,
        `${client.satisfaction}%`,
        client.practiceGroup
      ]),
      styles: { fontSize: 10 },
      headStyles: { fillColor: [44, 82, 130] },
      alternateRowStyles: { fillColor: [245, 247, 250] }
    });
  }

  // Footer
  const pageCount = (doc as any).internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.width - 30, doc.internal.pageSize.height - 10);
    doc.text('Generated by Medical Billing Dashboard', 20, doc.internal.pageSize.height - 10);
  }

  // Save the PDF
  const fileName = `${reportTypeLabel.replace(/\s+/g, '_')}_${format(new Date(), 'yyyy-MM-dd')}.pdf`;
  doc.save(fileName);
};
